#!/usr/bin/env python
#from irpos import *
#from math import *

LEFT = 0	
CENTER = 1	# macros for rods
RIGHT = 2

class Hanoi:
	rods = []	
	left_rod = []
	center_rod = []
	right_rod = []
	rods.append(left_rod)
	rods.append(center_rod)
	rods.append(right_rod)
	starting_rod = -1
	disks_number = 0
	step_list = []
	#irpos = IRPOS("IRpOS", "Irp6p", 6, "irp6p_manager")

	def __init__(self, nr, rod):
		self.disks_number = nr 
		self.starting_rod = rod 	# rod that contains disks on start
		self.buffering_rod = (rod + 1) % 3	
		self.target_rod = (rod + 2) % 3

		if self.starting_rod == LEFT:
			for i in range (self.disks_number, 0, -1):			
				self.left_rod.append(i)
		elif self.starting_rod == CENTER:
			for i in range (self.disks_number, 0, -1):		
				self.center_rod.append(i)
		else:
			for i in range (self.disks_number, 0, -1):			
				self.right_rod.append(i)

	def show_rods (self):
		for i in range (self.disks_number, 0, -1):
			if len(self.left_rod) >= i:
				napis = '  ' + `self.left_rod[i-1]`
			else:
				napis = '  |'
			napis += '   '

			if len(self.center_rod) >= i:
				napis += `self.center_rod[i-1]`
			else:
				napis += '|'
			napis += '   '

			if len(self.right_rod) >= i:
				napis += `self.right_rod[i-1]`
			else:
				napis += '|'
			print napis
		print ' -----------'
	
	def shift_disk (self, source_rod, target_rod):
		disk = self.rods[source_rod].pop()		
		self.rods[target_rod].append(disk)
		self.show_rods()
		return disk

	def solve (self, src, dst, buff, n):
		if n == 1:
			disk = self.shift_disk(src, dst)
			number_of_disks_below = len(self.rods[src])
			self.step_list.append((src, dst, disk, number_of_disks_below)) 
		else:
			self.solve(src, buff, dst, n-1)
			self.solve(src, dst, buff,1)
			self.solve(buff, dst, src, n-1)

	def solve_hanoi(self):
		self.solve(self.starting_rod, self.target_rod, self.buffering_rod, self.disks_number)
		
	def show_step_list(self):
		for i in range (0, len(self.step_list)):
			print str(self.step_list[i][0]) + ' -> ' + str(self.step_list[i][1]) + '(' + str(self.step_list[i][2]) + ', ' + str(self.step_list[i][3] + ')'  

if __name__ == '__main__':
	obj = Hanoi(4, 0)
	obj.show_rods()
	obj.solve(obj.starting_rod, obj.target_rod, obj.buffering_rod, obj.disks_number)
	obj.show_step_list()

	#irpos = IRPOS("IRpOS", "Irp6p", 6, "irp6p_manager")

	#print "Start"
	
	#irpos.move_to_synchro_position(10.0)

	#poruszanie motorami	
	#irpos.move_to_motor_position([6.116680896539328, 8.65822935329347, -34.55437759683414, 191.310097771172, 140.33868871754868, 745.4779455482828], 10.0)

	#poruszanie jointmi
	#irpos.move_to_joint_position([0.0, -0.13933613987476287, -1.4916385652871773, -0.22970620274142098, -0.16194261686533928, 4.5, -0.2], 20.0)

	#poruszanie chytakiem
	#1. rozstaw w m, 2. czas
	#irpos.tfg_to_joint_position(0.07, 5.0)

	#ustawianie reczne - sterowanie silowe
	#poczatek sterowania silowego
	#irpos.set_tool_physical_params(10.8, Vector3(0.004, 0.0, 0.156))
	#irpos.start_force_controller(Inertia(Vector3(0.0, 0.0, 0.0), Vector3(0.0, 0.0, 0.0)), ReciprocalDamping(Vector3(0.0025, 0.0025, 0.0025), Vector3(0.0, 0.0, 0.0)), Wrench(Vector3(0.0, 0.0, 0.0), Vector3(0.0, 0.0, 0.0)), Twist(Vector3(0.0, 0.0, 0.0), Vector3(0.0, 0.0, 0.0)))

	#time.sleep(30.0)
	#print irpos.get_motor_position()
	#irpos.stop_force_controller()
	#koniec sterowania silowego
# ustawienie poczatkowe take jak w postumencie, czyli patrzy od gory pionowo w dol
	#irpos.move_to_joint_position([ 0, -0.5 * math.pi, 0.0, 0, 1.48 * math.pi  , -0.5 * math.pi], 20.0)  # dla tracka powinno byc pierwsze 0, dla postumentu nie ma tego zera!!
	#irpos.tfg_to_joint_position(0.065, 5.0)
	#print "Pozycja minimum\n"
	#print irpos.get_tfg_joint_position()
	
	#irpos.tfg_to_joint_position(0.085, 5.0)
	#print "Pozycja maksimum\n"
	#print irpos.get_tfg_joint_position()

	#irpos.tfg_to_joint_position(0.07, 5.0)
	#print "Pozycja 0.07"
	#print irpos.get_tfg_joint_position()

	

	#1.ustawiamy chytak do pozycji roboczej
	#irpos.move_to_joint_position([0, -0.05958721029640646, -1.6148335928772972, 0.06109786284141526, -0.048274545057386486, 4.725347612820872, -0.06940834400104375], 10.0)
	#irpos.move_to_motor_position([0, 6.7151542970481835, 35.89583765991698, 8.898561191293089, 151.30852697484522, 70.34025951387547, 749.6374142216357], 10.0)
	#2. rozszerz chytak
	#irpos.tfg_to_joint_position(0.07, 5.0)
	#3.idz na dol 2.0 N, 40 cm w dol
	#irpos.move_rel_to_cartesian_pose_with_contact(20.0, Pose(Point(0.0, 0.0, -0.1), Quaternion(0.0, 0.0, 0.0, 0.0)), Wrench(Vector3(0.0,0.0,2.0),Vector3(0.0,0.0,0.0)))
	#lekko w gore
	#irpos.move_rel_to_cartesian_pose(10.0, Pose(Point(0.0, 0.0, 0.0), Quaternion(0.0, 0.0, 0.0, 1.0))) # OSTATNIA LICZBA KWATERNIONU MUSI BYC 1!!!!
					# move_rel_to_cartesian_pose : x - do mnie/ode mnie dla -/+, y - robotowe lewo/robotowe prawo dla +/-, z - gora/dol dla -/+
#	irpos.move_rel_to_cartesian_pose(10.0, Pose(Point(0.0, 0.0, -0.08), Quaternion(0.0, 0.0, 0.0, 1.0)))
	#irpos.move_rel_to_cartesian_pose(10.0, Pose(Point(-0.04, 0.0, 0.0), Quaternion(0.0, 0.0, 0.0, 1.0)))
	#irpos.move_rel_to_cartesian_pose(10.0, Pose(Point(0.0, -0.05, 0.0), Quaternion(0.0, 0.0, 0.0, 1.0)))
	#	irpos.move_rel_to_cartesian_pose(10.0, Pose(Point(0.04, 0.0, 0.0), Quaternion(0.0, 0.0, 0.0, 1.0)))
	#lap
	#irpos.tfg_to_joint_position(0.063, 5.0)
		# tfg_to_joint_position : rozstaw w metrach - nie za duzy, nie za maly, czas 
	#przeies sie do pozycji 1
	#irpos.move_to_motor_position([1.8802432031734913, 27.60674544342031, -17.354157818430018, 151.310097771172, 70.3308347359147, 758.4904223194518], 10.0)

	#print irpos.get_joint_position()

	#print irpos.get_cartesian_pose()
	#print irpos.get_tfg_joint_position()
	#print irpos.get_tfg_motor_position()
	

	#print "OK"

	
#pozycja w motorach nad pionkiem
#6.7151542970481835, 35.89583765991698, 8.898561191293089, 151.30852697484522, 70.34025951387547, 749.6374142216357
